<Identity
  Name="MyWPFApp.DevOpsDemo.Local"
  Publisher="CN=GitHubActionsDemo"
  Version="0.0.1.0" />


- name: Install .NET Core
  uses: actions/setup-dotnet@v1
  with:
    dotnet-version: 3.1.100

# Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
- name: Setup MSBuild.exe
  uses: microsoft/setup-msbuild@v1.0.0
  
# Test
- name: Execute Unit Tests
  run: dotnet test $env:Test_Project_Path

strategy:
  matrix:
    targetplatform: [x86, x64]

runs-on: windows-latest

env:
  SigningCertificate: GitHubActionsDemo.pfx
  Solution_Path: MyWpfApp.sln
  Test_Project_Path: MyWpfApp.Tests\MyWpfApp.Tests.csproj
  Wpf_Project_Path: MyWpfApp\MyWpfApp.csproj
  Wap_Project_Directory: MyWpfApp.Package
  Wap_Project_Name: MyWpfApp.Package.wapproj

# Test
- name: Execute Unit Tests
  run: dotnet test $env:Test_Project_Path

# Restore the application
- name:  Restore the Wpf application to populate the obj folder
  run: msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
  env:
    Configuration: Debug
    RuntimeIdentifier: win-${{ matrix.targetplatform }}

# Build the Windows Application Packaging project
- name: Build the Windows Application Packaging Project (wapproj) 
  run: msbuild $env:Solution_Path /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
  env:
    AppxBundle: Never
    BuildMode: SideLoadOnly
    Configuration: Release
    TargetPlatform: ${{ matrix.targetplatform }}

# Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
- name: Upload build artifacts
  uses: actions/upload-artifact@v1
  with:
    name: MSIX Package
    path: MyWpfApp.Package\AppPackages\